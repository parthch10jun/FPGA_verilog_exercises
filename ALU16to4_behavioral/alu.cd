$date
	Fri Jan 08 17:09:10 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alutest $end
$var wire 1 ! Ze $end
$var wire 16 " Z [15:0] $end
$var wire 1 # Si $end
$var wire 1 $ Pa $end
$var wire 1 % Ovf $end
$var wire 1 & Ca $end
$var reg 16 ' X [15:0] $end
$var reg 16 ( Y [15:0] $end
$scope module DUT $end
$var wire 1 % Overflow $end
$var wire 16 ) X [15:0] $end
$var wire 16 * Y [15:0] $end
$var wire 1 ! Zero $end
$var wire 16 + Z [15:0] $end
$var wire 1 # Sign $end
$var wire 1 $ Parity $end
$var wire 1 & Carry $end
$scope module A0 $end
$var wire 4 , A [3:0] $end
$var wire 4 - B [3:0] $end
$var wire 1 . cin $end
$var wire 1 / cout $end
$var wire 4 0 S [3:0] $end
$upscope $end
$scope module A1 $end
$var wire 4 1 A [3:0] $end
$var wire 4 2 B [3:0] $end
$var wire 1 / cin $end
$var wire 1 3 cout $end
$var wire 4 4 S [3:0] $end
$upscope $end
$scope module A2 $end
$var wire 4 5 A [3:0] $end
$var wire 4 6 B [3:0] $end
$var wire 1 3 cin $end
$var wire 1 7 cout $end
$var wire 4 8 S [3:0] $end
$upscope $end
$scope module A3 $end
$var wire 4 9 A [3:0] $end
$var wire 4 : B [3:0] $end
$var wire 1 7 cin $end
$var wire 1 & cout $end
$var wire 4 ; S [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ;
bx :
bx 9
bx 8
x7
bx 6
bx 5
bx 4
x3
bx 2
bx 1
bx 0
x/
0.
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
x&
x%
x$
x#
bx "
x!
$end
#5
1%
0#
0$
b0 ;
1&
b1111 8
07
b1111 4
03
0!
b111111111111 "
b111111111111 +
b1111 0
0/
b0 -
b0 2
b0 6
b1000 :
b1111 ,
b1111 1
b1111 5
b1000 9
b1000000000000000 (
b1000000000000000 *
b1000111111111111 '
b1000111111111111 )
#10
1!
0%
b0 8
17
b0 4
13
0#
1/
1&
b0 0
b0 "
b0 +
b0 ;
b10 -
b0 :
b1110 ,
b1111 9
b10 (
b10 *
b1111111111111110 '
b1111111111111110 )
#15
1#
b1111 ;
0&
b1111 8
07
b1111 4
03
0!
b1111111111111111 "
b1111111111111111 +
b1111 0
0/
b101 -
b101 2
b101 6
b101 :
b1010 ,
b1010 1
b1010 5
b1010 9
b101010101010101 (
b101010101010101 *
b1010101010101010 '
b1010101010101010 )
#20
